{"ast":null,"code":"var _jsxFileName = \"/home/aatef/Documents/reacthooks/src/App.js\";\nimport React, { useState, useEffect } from 'react'; // import Header from './Search';\n\nimport axios from 'axios';\nexport default function App(props) {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    setInterval(() => axios.get('http://localhost:3000/messages').then(res => {\n      //data is the body of the response \n      setMessages(res.data);\n    }), 60 * 1000);\n  }, []); //only one when the component is opend\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, messages.map(message => /*#__PURE__*/React.createElement(\"h1\", {\n    key: message.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 31\n    }\n  }, message.content)), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"Hello \", this.state.username), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Enter your name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: this.myChangeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  })));\n} // function usesate(initialvalue) {\n//   let item=initialvalue;\n//   let setitem=(val)=>{\n//    item=val; \n//   }\n//   return[item,setitem];\n// }\n//new state the init state is an array \n//use state reurn 2 things :  state and function can editstate;\n// setMessages(oldMessages => oldMessages.concat(newMessages))\n// setMessages(oldMessages => oldMessages.concat(res.data))\n//   function countup()\n//   {\n// setcounter(counter+1)\n//   }","map":{"version":3,"sources":["/home/aatef/Documents/reacthooks/src/App.js"],"names":["React","useState","useEffect","axios","App","props","messages","setMessages","setInterval","get","then","res","data","map","message","content","state","username","myChangeHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAoB;AACnC,QAAM,CAACC,QAAD,EAAUC,WAAV,IAAuBN,QAAQ,CAAC,EAAD,CAArC;AACAC,EAAAA,SAAS,CAAG,MAAI;AAChBM,IAAAA,WAAW,CAET,MAAIL,KAAK,CAACM,GAAN,CAAU,gCAAV,EAA4CC,IAA5C,CAAiDC,GAAG,IAAE;AAC5D;AACEJ,MAAAA,WAAW,CAACI,GAAG,CAACC,IAAL,CAAX;AAED,KAJK,CAFK,EAQV,KAAG,IARO,CAAX;AAWC,GAZQ,EAYP,EAZO,CAAT,CAFmC,CAc5B;;AAGH,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEEN,QAAQ,CAACO,GAAT,CAAaC,OAAO,iBAAE;AAAI,IAAA,GAAG,EAAEA,OAAO,CAACC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BD,OAAO,CAACC,OAAnC,CAAtB,CAFF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAW,KAAKC,KAAL,CAAWC,QAAtB,CADE,eAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFE,eAGF;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,QAAQ,EAAE,KAAKC,eAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHE,CALF,CADF;AAqBD,C,CAEH;AAEA;AACA;AACA;AACA;AACA;AACA;AAEC;AACC;AAIF;AAGA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import Header from './Search';\n\nimport axios from 'axios';\nexport default function App(props) {\nconst [messages,setMessages]=useState([]);\nuseEffect(  ()=>{\nsetInterval(\n  \n  ()=>axios.get('http://localhost:3000/messages').then(res=>{\n//data is the body of the response \n  setMessages(res.data);\n\n})\n\n,60*1000)\n\n\n},[] ) //only one when the component is opend\n\n \n    return (\n      <div>\n      {\n        messages.map(message=><h1 key={message.content}>{message.content}</h1>)\n      }\n      {\n        <form>\n      <h1>Hello {this.state.username}</h1>\n      <p>Enter your name:</p>\n      <input\n        type='text'\n        onChange={this.myChangeHandler}\n      />\n      </form>\n\n      }\n\n      </div>\n    \n    \n    )\n  }\n\n// function usesate(initialvalue) {\n\n//   let item=initialvalue;\n//   let setitem=(val)=>{\n//    item=val; \n//   }\n//   return[item,setitem];\n// }\n\n //new state the init state is an array \n  //use state reurn 2 things :  state and function can editstate;\n\n\n\n// setMessages(oldMessages => oldMessages.concat(newMessages))\n\n\n// setMessages(oldMessages => oldMessages.concat(res.data))\n\n//   function countup()\n//   {\n// setcounter(counter+1)\n//   }"]},"metadata":{},"sourceType":"module"}