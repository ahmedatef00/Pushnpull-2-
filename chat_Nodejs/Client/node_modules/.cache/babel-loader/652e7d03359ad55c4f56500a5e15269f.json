{"ast":null,"code":"var _jsxFileName = \"/home/aatef/Documents/reacthooks/src/App.js\";\nimport React, { useState, useEffect } from 'react'; // import Header from './Search';\n\nimport axios from 'axios';\nconst id = Math.ceil(Math.random() * 100000);\nexport default function App(props) {\n  const [messages, setMessages] = useState([]);\n  const [usernames, setUsername] = useState([]);\n  const [input, setInput] = useState('');\n  const [inputname, setInputname] = useState('');\n\n  const subscribe = () => axios.post('http://localhost:3000/subscribe', {\n    id\n  }).then(res => {\n    const oldMessages = setMessages(messages.concat(res.data));\n    setMessages(oldMessages => oldMessages.concat(res.data));\n    const oldUsers = setUsername(usernames.concat(res.data));\n    setMessages(oldUsers => oldMessages.concat(res.data)); //subscripe again\n\n    subscribe();\n  });\n\n  useEffect(() => {\n    subscribe(); // setInterval(\n    // () => \n    // axios.get('http://localhost:3000/messages').then(res => {\n    //   //data is the body of the response \n    //   setMessages(res.data);\n    //   setUsername(res.data);\n    // })\n    //only one when the component is opend   //end of effect   // , 100 * 1000)\n  }, []); //only one when the component is opend   //end of effect \n\n  const myChangeHandler = e => {\n    const {\n      target: {\n        value\n      }\n    } = e;\n    setInput(value);\n  };\n\n  const nameChangeHandler = e => {\n    const {\n      target: {\n        value\n      }\n    } = e;\n    setInputname(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault(); //prevent refresh\n    // axios.post('http://localhost:3000/messages',{content:input,username:inputname})//in your body post the content from value\n\n    axios.post('http://localhost:3000/messageSubscribers', {\n      content: input,\n      username: inputname\n    }); //in your body post the content from value\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, messages.map(message => /*#__PURE__*/React.createElement(\"h1\", {\n    key: message.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  }, \" \", message.content)), usernames.map(username => /*#__PURE__*/React.createElement(\"h1\", {\n    key: username.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 34\n    }\n  }, \" \", username.username, \" \")), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"our chat\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"content\",\n    id: \"content\",\n    placeholder: \"message\",\n    onChange: myChangeHandler,\n    value: input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"contentname\",\n    id: \"content\",\n    placeholder: \"username\",\n    onChange: nameChangeHandler,\n    value: inputname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \"send\")));\n} // function usesate(initialvalue) {\n//   let item=initialvalue;\n//   let setitem=(val)=>{\n//    item=val; \n//   }\n//   return[item,setitem];\n// }\n//new state the init state is an array \n//use state reurn 2 things :  state and function can editstate;\n// setMessages(oldMessages => oldMessages.concat(newMessages))\n// setMessages(oldMessages => oldMessages.concat(res.data))\n//   function countup()\n//   {\n// setcounter(counter+1)\n//   }","map":{"version":3,"sources":["/home/aatef/Documents/reacthooks/src/App.js"],"names":["React","useState","useEffect","axios","id","Math","ceil","random","App","props","messages","setMessages","usernames","setUsername","input","setInput","inputname","setInputname","subscribe","post","then","res","oldMessages","concat","data","oldUsers","myChangeHandler","e","target","value","nameChangeHandler","handleSubmit","preventDefault","content","username","map","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import Header from './Search';\n\nimport axios from 'axios';\nconst id = Math.ceil(Math.random()*100000);\nexport default function App(props) {\n  const [messages, setMessages] = useState([]);\n  const [usernames, setUsername] = useState([]);\n\n  const [input, setInput] = useState('');\n  const [inputname, setInputname] = useState('');\n\nconst subscribe =    ()=> axios.post('http://localhost:3000/subscribe', \n{ id }).then(res => {\n\nconst  oldMessages =setMessages(messages.concat(res.data));\nsetMessages(oldMessages => oldMessages.concat(res.data))\n\n const oldUsers= setUsername(usernames.concat(res.data));\nsetMessages(oldUsers => oldMessages.concat(res.data))\n\n  //subscripe again\n  subscribe();\n});\n\n  useEffect(() => {\n\n    subscribe();\n    // setInterval(\n\n      // () => \n      // axios.get('http://localhost:3000/messages').then(res => {\n      //   //data is the body of the response \n      //   setMessages(res.data);\n      //   setUsername(res.data);\n\n      // })\n  //only one when the component is opend   //end of effect   // , 100 * 1000)\n  }, []) //only one when the component is opend   //end of effect \n \n  const myChangeHandler = (e) => {\n    const{target:{value}}=e;\nsetInput(value);\n \n      }\n      const nameChangeHandler = (e) => {\n        const{target:{value}}=e;\n    setInputname(value);\n     \n          }\n      \n      const handleSubmit = (e) => {\n        e.preventDefault(); //prevent refresh\n\n        // axios.post('http://localhost:3000/messages',{content:input,username:inputname})//in your body post the content from value\n\n        axios.post('http://localhost:3000/messageSubscribers',{content:input,username:inputname})//in your body post the content from value\n     \n          }\n      \n\n  return (\n    <div>\n      {\n        messages.map(message => <h1 key={message.content}> {message.content}</h1>)\n      }\n      {usernames.map((username)=><h1 key = {username.username}> {username.username} </h1>)\n      }\n      {\n        <form id = \"form\" onSubmit={handleSubmit}>\n          <h1>our chat</h1>\n          {/* <p>Enter your name:{usernames.content} </p> */}\n          <input\n            type='text'\n            name=\"content\"\n            id=\"content\"\n            placeholder=\"message\"\n            onChange={myChangeHandler}\n            value={input}\n          />\n           <input\n            type='text'\n            name=\"contentname\"\n            id=\"content\"\n            placeholder=\"username\"\n            onChange={nameChangeHandler}\n            value={inputname}\n          />\n          <button type=\"submit\" >send</button>\n        </form>\n\n      }\n\n    </div>\n\n\n  )\n}\n\n// function usesate(initialvalue) {\n\n//   let item=initialvalue;\n//   let setitem=(val)=>{\n//    item=val; \n//   }\n//   return[item,setitem];\n// }\n\n //new state the init state is an array \n  //use state reurn 2 things :  state and function can editstate;\n\n// setMessages(oldMessages => oldMessages.concat(newMessages))\n\n\n// setMessages(oldMessages => oldMessages.concat(res.data))\n\n\n\n//   function countup()\n//   {\n// setcounter(counter+1)\n//   }"]},"metadata":{},"sourceType":"module"}