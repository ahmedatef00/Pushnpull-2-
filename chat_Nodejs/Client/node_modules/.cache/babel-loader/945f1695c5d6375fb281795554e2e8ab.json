{"ast":null,"code":"var _jsxFileName = \"/home/aatef/Desktop/reacthooks/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst id = Math.ceil(Math.random() * 100000);\nexport default function App(props) {\n  const [messages, setMessages] = useState([]);\n  const [usernames, setUsername] = useState([]);\n  const [input, setInput] = useState('');\n  const [inputname, setInputname] = useState('');\n\n  const subscribe = () => axios.post('http://localhost:3000/subscribe', {\n    id\n  }).then(res => {\n    // setMessages(oldMessages => oldMessages.concat(newMessages))\n    // setMessages(oldMessages => oldMessages.concat(res.data))\n    setMessages(oldmessages => oldmessages.concat(messages));\n    setMessages(oldMessages => oldMessages.concat(res.data));\n    setUsername(oldUser => oldUser.concat(usernames));\n    setUsername(oldUser => oldUser.concat(res.data)); //subscripe again\n\n    subscribe();\n  });\n\n  useEffect(() => {\n    subscribe(); //Short pooling \n    // setInterval(\n    // () => \n    // axios.get('http://localhost:3000/messages').then(res => {\n    //   //data is the body of the response \n    //   setMessages(res.data);\n    //   setUsername(res.data);\n    // })\n    //only one when the component is opend   //end of effect   // , 100 * 1000)\n  }, []); //only one when the component is opend   //end of effect \n\n  const myChangeHandler = e => {\n    const {\n      target: {\n        value\n      }\n    } = e;\n    setInput(value);\n  };\n\n  const nameChangeHandler = e => {\n    const {\n      target: {\n        value\n      }\n    } = e;\n    setInputname(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault(); //prevent refresh\n    // axios.post('http://localhost:3000/messages',{content:input,username:inputname})//in your body post the content from value\n\n    axios.post('http://localhost:3000/messageSubscribers', {\n      content: input,\n      username: inputname\n    }); //in your body post the content from value\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, messages.map(message => /*#__PURE__*/React.createElement(\"h1\", {\n    key: message.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 33\n    }\n  }, \" msg : \", message.content)), usernames.map(username => /*#__PURE__*/React.createElement(\"h1\", {\n    key: username.username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 36\n    }\n  }, \" user : \", username.username, \" \")), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"our chat\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"content\",\n    id: \"content\",\n    placeholder: \"message\",\n    onChange: myChangeHandler,\n    value: input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"contentname\",\n    id: \"content\",\n    placeholder: \"username\",\n    onChange: nameChangeHandler,\n    value: inputname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"send\")));\n}","map":{"version":3,"sources":["/home/aatef/Desktop/reacthooks/src/App.js"],"names":["React","useState","useEffect","axios","id","Math","ceil","random","App","props","messages","setMessages","usernames","setUsername","input","setInput","inputname","setInputname","subscribe","post","then","res","oldmessages","concat","oldMessages","data","oldUser","myChangeHandler","e","target","value","nameChangeHandler","handleSubmit","preventDefault","content","username","map","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport axios from 'axios';\nconst id = Math.ceil(Math.random() * 100000);\nexport default function App(props) {\n  const [messages, setMessages] = useState([]);\n  const [usernames, setUsername] = useState([]);\n\n  const [input, setInput] = useState('');\n  const [inputname, setInputname] = useState('');\n\n  const subscribe = () => axios.post('http://localhost:3000/subscribe',\n    { id }).then(res => {\n\n\n      // setMessages(oldMessages => oldMessages.concat(newMessages))\n\n\n      // setMessages(oldMessages => oldMessages.concat(res.data))\n\n      setMessages(oldmessages => oldmessages.concat(messages))\n      setMessages(oldMessages => oldMessages.concat(res.data))\n      setUsername(oldUser => oldUser.concat(usernames));\n      setUsername(oldUser => oldUser.concat(res.data));\n\n      //subscripe again\n      subscribe();\n    });\n\n  useEffect(() => {\n\n    subscribe();\n\n    //Short pooling \n    // setInterval(\n\n    // () => \n    // axios.get('http://localhost:3000/messages').then(res => {\n    //   //data is the body of the response \n    //   setMessages(res.data);\n    //   setUsername(res.data);\n\n    // })\n    //only one when the component is opend   //end of effect   // , 100 * 1000)\n  }, []) //only one when the component is opend   //end of effect \n\n  const myChangeHandler = (e) => {\n    const { target: { value } } = e;\n    setInput(value);\n\n  }\n  const nameChangeHandler = (e) => {\n    const { target: { value } } = e;\n    setInputname(value);\n\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault(); //prevent refresh\n\n    // axios.post('http://localhost:3000/messages',{content:input,username:inputname})//in your body post the content from value\n\n    axios.post('http://localhost:3000/messageSubscribers', { content: input, username: inputname })//in your body post the content from value\n\n  }\n\n\n  return (\n    <div>\n      {\n        messages.map(message => <h1 key={message.content}> msg : {message.content}</h1>)\n      }\n      {usernames.map((username) => <h1 key={username.username}> user : {username.username} </h1>)\n      }\n      {\n        <form id=\"form\" onSubmit={handleSubmit}>\n          <h1>our chat</h1>\n          {/* <p>Enter your name:{usernames.content} </p> */}\n          <input\n            type='text'\n            name=\"content\"\n            id=\"content\"\n            placeholder=\"message\"\n            onChange={myChangeHandler}\n            value={input}\n          />\n          <input\n            type='text'\n            name=\"contentname\"\n            id=\"content\"\n            placeholder=\"username\"\n            onChange={nameChangeHandler}\n            value={inputname}\n          />\n          <button type=\"submit\" >send</button>\n        </form>\n\n      }\n\n    </div>\n\n\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}